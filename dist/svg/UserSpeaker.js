var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
var UserSpeaker = function (_a) {
    var className = _a.className, onClick = _a.onClick, props = __rest(_a, ["className", "onClick"]);
    return (_jsxs("svg", __assign({ width: '24', height: '24', viewBox: '0 0 24 24', fill: 'none', xmlns: 'http://www.w3.org/2000/svg', className: className, onClick: onClick }, props, { children: [_jsx("path", { d: 'M21.7143 14.1727L20.4726 12.931C20.6139 12.641 20.6882 12.3229 20.6899 12.0003C20.6899 11.5706 20.5625 11.1506 20.3238 10.7934C20.0851 10.4361 19.7458 10.1577 19.3488 9.99325C18.9519 9.82882 18.5151 9.7858 18.0937 9.86963C17.6723 9.95345 17.2852 10.1603 16.9813 10.4642C16.6775 10.768 16.4706 11.1551 16.3868 11.5765C16.303 11.9979 16.346 12.4347 16.5104 12.8316C16.6749 13.2286 16.9533 13.5679 17.3105 13.8066C17.6678 14.0453 18.0878 14.1727 18.5175 14.1727C18.8404 14.1711 19.1587 14.0969 19.449 13.9555L20.6899 15.1967V20.69H16.3451V18.5175C16.3436 17.1736 15.809 15.8852 14.8587 14.9349C13.9085 13.9846 12.62 13.4501 11.2761 13.4486H6.93127C5.58737 13.4501 4.29895 13.9846 3.34866 14.9349C2.39838 15.8852 1.86384 17.1736 1.8623 18.5175V22.1382H22.1382V15.1967C22.1387 15.0065 22.1015 14.818 22.0287 14.6423C21.9559 14.4665 21.8491 14.3069 21.7143 14.1727ZM3.31058 18.5175C3.31173 17.5576 3.69356 16.6374 4.37233 15.9586C5.05109 15.2798 5.97136 14.898 6.93127 14.8968H11.2761C12.236 14.898 13.1563 15.2798 13.8351 15.9586C14.5138 16.6373 14.8957 17.5576 14.8968 18.5175V20.69H3.31058V18.5175Z', fill: '#20A8C6' }), _jsx("path", { d: 'M9.10368 3.31064C9.81979 3.31064 10.5198 3.52299 11.1152 3.92084C11.7107 4.31868 12.1747 4.88416 12.4488 5.54575C12.7228 6.20735 12.7945 6.93535 12.6548 7.63769C12.5151 8.34004 12.1703 8.98518 11.6639 9.49155C11.1575 9.99791 10.5124 10.3427 9.81005 10.4825C9.1077 10.6222 8.3797 10.5505 7.71811 10.2764C7.05651 10.0024 6.49104 9.5383 6.09319 8.94288C5.69534 8.34746 5.48299 7.64744 5.48299 6.93133C5.48299 5.97106 5.86446 5.05013 6.54347 4.37112C7.22248 3.69211 8.14342 3.31064 9.10368 3.31064ZM9.10368 1.86237C8.10114 1.86237 7.1211 2.15966 6.28752 2.71664C5.45393 3.27363 4.80423 4.06529 4.42057 4.99152C4.03691 5.91775 3.93653 6.93695 4.13212 7.92024C4.3277 8.90352 4.81048 9.80672 5.51938 10.5156C6.22829 11.2245 7.13149 11.7073 8.11478 11.9029C9.09806 12.0985 10.1173 11.9981 11.0435 11.6144C11.9697 11.2308 12.7614 10.5811 13.3184 9.7475C13.8754 8.91391 14.1726 7.93388 14.1726 6.93133C14.1726 5.58696 13.6386 4.29765 12.688 3.34703C11.7374 2.39642 10.4481 1.86237 9.10368 1.86237Z', fill: '#20A8C6' })] })));
};
export default UserSpeaker;
//# sourceMappingURL=UserSpeaker.js.map