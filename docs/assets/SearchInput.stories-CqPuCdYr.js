import{j as t}from"./jsx-runtime-BTJTZTIL.js";import{S as u}from"./SearchRounded-B4wRncnu.js";import{T as l}from"./Input-BL4cShty.js";import{u as d}from"./TranslationProvider-CmuXOqXD.js";import{I as h}from"./IconButton-DLIjHXzT.js";import{G as g}from"./global.styles-ky-6VlY_.js";import{C as E}from"./ThemeProvider-OMQ2BVwH.js";import"./index-ChsGqxH_.js";import"./styled-components-CgXJv8Ku.js";import"./styled-components.browser.esm-DT3FsLGj.js";import"./index-CAe6R3bO.js";import"./createSvgIcon-DrAgNEdu.js";import"./DefaultPropsProvider-BjW0N_ST.js";import"./createTheme-B9H9ZwjD.js";import"./DefaultPropsProvider-CE9yCcll.js";import"./emotion-react.browser.esm-pxioRHjz.js";import"./extends-CF3RwP-h.js";import"./TextField-D3NjSw1l.js";import"./useSlot-BOxLXIxU.js";import"./resolveComponentProps-SIU9M0H_.js";import"./setPrototypeOf-C3V6guyq.js";import"./index-CqMW6mv0.js";import"./index-C7hTFOIV.js";import"./useFormControl-CZ2S_N2f.js";import"./Select-DVRoBFW1.js";import"./index-Cr4NX4s1.js";import"./useSlotProps-KFilLj6-.js";import"./Popover-BbQG8zDd.js";import"./isHostComponent-DVu5iVWx.js";import"./Grow-D8l1LaiA.js";import"./ownerDocument-DW-IO8s5.js";import"./Paper-CynSGn_i.js";import"./useControlled-CuGBdVBD.js";import"./formControlState-Dq1zat_P.js";import"./createSimplePaletteValueFilter-bm0fmN_7.js";import"./index-CE9nzNZd.js";import"./ButtonBase-CMLK2NO8.js";import"./assertThisInitialized-B9jnkVVz.js";import"./isFocusVisible-B8k4qzLc.js";import"./CircularProgress-CfUbmS-o.js";import"./useEnhancedEffect-DhebxzmZ.js";import"./Theme-C1aqVGh7.js";const a=({onSearchSubmit:e,searchText:s,handleSearchChange:p})=>{const{t:c}=d();return t.jsx("form",{onSubmit:e,children:t.jsx(l,{label:c("general.search_placeholder"),type:"text",size:"small",value:s,onChange:p,icon:t.jsx(h,{onClick:e,children:t.jsx(u,{})})})})};a.__docgenInfo={description:"",methods:[],displayName:"SearchInput",props:{onSearchSubmit:{required:!0,tsType:{name:"signature",type:"function",raw:`(
  event: React.FormEvent<HTMLFormElement> | React.MouseEvent<HTMLButtonElement>,
) => void`,signature:{arguments:[{type:{name:"union",raw:"React.FormEvent<HTMLFormElement> | React.MouseEvent<HTMLButtonElement>",elements:[{name:"ReactFormEvent",raw:"React.FormEvent<HTMLFormElement>",elements:[{name:"HTMLFormElement"}]},{name:"ReactMouseEvent",raw:"React.MouseEvent<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]}]},name:"event"}],return:{name:"void"}}},description:""},searchText:{required:!0,tsType:{name:"string"},description:""},handleSearchChange:{required:!0,tsType:{name:"signature",type:"function",raw:"(event: React.ChangeEvent<HTMLInputElement>) => void",signature:{arguments:[{type:{name:"ReactChangeEvent",raw:"React.ChangeEvent<HTMLInputElement>",elements:[{name:"HTMLInputElement"}]},name:"event"}],return:{name:"void"}}},description:""}}};const i={onSearchSubmit:e=>{e.preventDefault(),console.log("Search submitted")},handleSearchChange:e=>{console.log("Search changed:",e.target.value)},t:e=>e},me={title:"Components/SearchInput",component:a,tags:["autodocs"],decorators:[e=>t.jsxs(E,{children:[t.jsx(g,{}),t.jsx(e,{})]})],parameters:{layout:"centered"},args:{searchText:"",...i}},r={args:{searchText:"",...i}};var o,n,m;r.parameters={...r.parameters,docs:{...(o=r.parameters)==null?void 0:o.docs,source:{originalSource:`{
  args: {
    searchText: '',
    ...mockFunctions
  }
}`,...(m=(n=r.parameters)==null?void 0:n.docs)==null?void 0:m.source}}};const ae=["Default"];export{r as Default,ae as __namedExportsOrder,me as default};
